/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dj;

import java.awt.BasicStroke;
import java.awt.Color;
import static java.awt.Color.BLACK;
import static java.awt.Color.RED;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;


/**
 *
 * @author MSaqib
 */
public class NewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public Color nodeColor = new Color(108,203,235);
    public Color nodeBorder = new Color(4,141,186);
    public Color HighLight = new Color(222,245,73);
    public int XX=0,YY=0;
    public static int SRC = -1,DSTN = -1;
  
    public class Info{
        public int lineNo;
        public int toNode;
    }
    public class Node {
        public int x;
        public int y;
        public char name; 
        public int radius = 0;
        public ArrayList<Info> info = new ArrayList<>();
        public boolean isGrown = false;
        public boolean isGrowing = false;
        public boolean inPath = false;

}
    public Node NodeAnime = new Node();
    public class Line{
        public int x1;
        public int y1;
        public int x2;
        public int y2;
        public int weight=  0;
        public boolean isHighlighted = false;
        public boolean toHighlight = false;
        public char src = '*',dstn = '*';
    }
    
    public static  boolean inDrag = false;
    public static boolean found =  false;
    public static ArrayList<Node> nodes = new ArrayList<>();
    public static ArrayList<Line> lines = new ArrayList<>();
    public static char Name = 'A';
    
    public NewJPanel() {
        initComponents();
    }

    @Override
    public void paintComponent(Graphics g1){
         super.paintComponent(g1);
       Graphics2D g = (Graphics2D)g1;
g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

for(int i=0;i<lines.size()-1;i++){
    g.setStroke(new BasicStroke(3));
    g.drawLine(lines.get(i).x1,lines.get(i).y1,lines.get(i).x2,lines.get(i).y2);
    g.setFont(new Font("SansSerif",Font.PLAIN,20));
    g.drawString(Integer.toString(lines.get(i).weight),(lines.get(i).x1+lines.get(i).x2)/2+5,(lines.get(i).y1+lines.get(i).y2)/2-5);
}
if(!lines.isEmpty()){
    g.setStroke(new BasicStroke(3));
    g.drawLine(lines.get(lines.size()-1).x1,lines.get(lines.size()-1).y1,lines.get(lines.size()-1).x2,lines.get(lines.size()-1).y2);
    g.setFont(new Font("SansSerif",Font.PLAIN,20));
    if(!inDrag)
       g.drawString(Integer.toString(lines.get(lines.size()-1).weight),(lines.get(lines.size()-1).x1+lines.get(lines.size()-1).x2)/2+5,(lines.get(lines.size()-1).y1+lines.get(lines.size()-1).y2)/2-5); 
}
if(found){
    for(int i=0;i<lines.size();i++){
        if(lines.get(i).toHighlight){
            g.setStroke(new BasicStroke(5));
            g.setColor(HighLight);
    g.drawLine(lines.get(i).x1,lines.get(i).y1,lines.get(i).x2,lines.get(i).y2);
        }
    }
}

        for(int i=0;i<nodes.size();i++){
            g.setStroke(new BasicStroke(3));
            g.setColor(nodeColor);
            if(nodes.get(i).radius == 50){
            g.fillOval(nodes.get(i).x-23, nodes.get(i).y-23, 48, 48);
            g.setColor(nodeBorder);
            g.drawOval(nodes.get(i).x-25, nodes.get(i).y-25, 50, 50);
            g.setFont(new Font("SansSerif",Font.PLAIN,28));
            g.setColor(BLACK);
            g.drawString(Character.toString(nodes.get(i).name), nodes.get(i).x-8, nodes.get(i).y+10);
            }else{
                 g.fillOval(nodes.get(i).x-nodes.get(i).radius/2, nodes.get(i).y-nodes.get(i).radius/2, nodes.get(i).radius, nodes.get(i).radius);
            }
        }
        if(found){
            for(int i=0;i<nodes.size();i++){
                if(nodes.get(i).inPath){
                      g.setStroke(new BasicStroke(5));
                        g.setColor(RED);
            g.drawOval(nodes.get(i).x-25, nodes.get(i).y-25, 50, 50);
                }
            }
        }
        if(found)
            found = false;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1240, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 753, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
Timer animate = new Timer(5,new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent ae) {
           if(NodeAnime.radius < 50){
               System.out.println("R"+NodeAnime.radius);
               NodeAnime.radius+=5;
               NodeAnime.isGrown = true;
               NodeAnime.isGrowing = false;
           }
        else
        animate.stop();
           repaint();
        }
    });
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        System.out.println("Click");
        NewJFrame.jTextField1.setText("");
        for(int i=0;i<nodes.size();i++){
            if(XX < nodes.get(i).x+25 && XX > nodes.get(i).x-25)
                return;
        }
         for(int i=0;i<NewJPanel.lines.size();i++){
           NewJPanel.lines.get(i).toHighlight = false;
           NewJPanel.lines.get(i).isHighlighted = false;
       }
       for(int i=0;i<NewJPanel.nodes.size();i++){
           NewJPanel.nodes.get(i).inPath = false;
       }
        Node temp = new Node();
        temp.x = evt.getX();
        temp.y = evt.getY();
        temp.name = Name++;
        nodes.add(temp);
        NewJFrame.jComboBox1.addItem(Character.toString(temp.name));
        NewJFrame.jComboBox2.addItem(Character.toString(temp.name));
        NodeAnime = temp;
        temp.isGrowing = true;
        temp.isGrown = false;
        NewJFrame.jComboBox1.setEnabled(true);
         NewJFrame.jComboBox2.setEnabled(true);
        animate.start();
        //repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
          NewJFrame.jTextField1.setText("");
   for(int i=0;i<NewJPanel.lines.size();i++){
           NewJPanel.lines.get(i).toHighlight = false;
           NewJPanel.lines.get(i).isHighlighted = false;
       }
       for(int i=0;i<NewJPanel.nodes.size();i++){
           NewJPanel.nodes.get(i).inPath = false;
       }
        try{
            
        int X = evt.getX();
        int Y = evt.getY();
        if(!inDrag){
            
            inDrag = true;
        for(int i=0;i<nodes.size();i++){
            if(X < nodes.get(i).x+25 && X > nodes.get(i).x-25 && Y > nodes.get(i).y-25 && Y < nodes.get(i).y+25){
                Line temp = new Line();
                temp.x1 = X;
                temp.y1 = Y;
                temp.src = nodes.get(i).name;
                lines.add(temp);
                break;
            }
        }
        }
        lines.get(lines.size()-1).x2 = X;
        lines.get(lines.size()-1).y2 = Y;
        
      repaint();
        }
        catch(IndexOutOfBoundsException ioe){
            System.err.println("Catch"); 
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
          NewJFrame.jTextField1.setText("");
         System.out.println("Press");
          XX = evt.getX();
        YY = evt.getY();
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
          NewJFrame.jTextField1.setText("");
        if(evt.getX()==XX && !inDrag)
            return;
        inDrag  = false;
        boolean proper = false;
        try{
        int X = evt.getX();
        int Y  = evt.getY();
        for(int i = 0;i<nodes.size();i++){
            if(X < nodes.get(i).x+25 && X > nodes.get(i).x-25 && Y > nodes.get(i).y-25 && Y < nodes.get(i).y+25){
                lines.get(lines.size()-1).dstn = nodes.get(i).name;
                Line temp = lines.get(lines.size()-1);
                for(int j=0;j<lines.size()-1;j++){
                    if((lines.get(j).src == temp.src && lines.get(j).dstn == temp.dstn)||
                       (lines.get(j).dstn == temp.src && lines.get(j).src == temp.dstn)){
                        lines.remove(lines.size()-1);
                        repaint();
                        return;
                    }     
                }
                        
                proper = true;
                inputWeight(lines.get(lines.size()-1));
               
                break;
            }
        }
        if((!proper && XX != X)|| lines.get(lines.size()-1).weight<=0)
            lines.remove(lines.size()-1);
        else  fillInfo(lines.get(lines.size()-1),lines.get(lines.size()-1).weight);
        repaint();
        }
        catch(IndexOutOfBoundsException ioe){}
    }//GEN-LAST:event_formMouseReleased
public void inputWeight(Line line){
    JFrame frame  = new JFrame();
           frame.setSize(30,20);
           frame.setLocation(50,50); 
         String s = (String)  JOptionPane.showInputDialog(frame,"Enter weight of path","Info",
                 JOptionPane.QUESTION_MESSAGE,null,null,"");
         try{
        line.weight = Integer.parseInt(s);
         }
         catch(NumberFormatException nf){}
}

public void fillInfo (Line line, int weight){
    try{
    Node temp1=null,temp2=null;
    for(int i=0;i<nodes.size();i++){
        if(nodes.get(i).name == line.src)
            temp1 = nodes.get(i);
           
        if(nodes.get(i).name == line.dstn)
            temp2 = nodes.get(i);
            
    }
    Info tempa = new Info();
    Info tempb = new Info();
    tempa.lineNo = weight;
    tempb.lineNo = weight;
    tempa.toNode = temp2.name - 65;
    temp1.info.add(tempa);
    tempb.toNode = temp1.name - 65;
    temp2.info.add(tempb);
    }
    catch(NullPointerException ne){
        System.err.println("Nulled");
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
